DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS friendships;
DROP TABLE IF EXISTS film_genre;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS mpa;

CREATE TABLE IF NOT EXISTS users
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(100) NOT NULL,
    login    VARCHAR(50)  NOT NULL,
    name     VARCHAR(50)  NOT NULL,
    birthday DATE         NOT NULL,
    CONSTRAINT email_check CHECK (email REGEXP '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$'),
    CONSTRAINT login_check CHECK (login REGEXP '^\S+$'),
    CONSTRAINT users_name_check CHECK (LENGTH(name) BETWEEN 1 AND 50),
    CONSTRAINT birthday_check CHECK (birthday < CURRENT_DATE)
);

CREATE TABLE IF NOT EXISTS mpa
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL,
    CONSTRAINT mpa_name_check CHECK (LENGTH(name) BETWEEN 1 AND 50)
);

CREATE TABLE IF NOT EXISTS films
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR NOT NULL,
    description  VARCHAR NOT NULL,
    release_date DATE    NOT NULL,
    duration     INTEGER NOT NULL,
    mpa_id       INTEGER REFERENCES mpa (id) ON DELETE SET NULL,
    CONSTRAINT films_name_check CHECK (LENGTH(name) BETWEEN 1 AND 50),
    CONSTRAINT description_check CHECK (LENGTH(description) BETWEEN 1 AND 200),
    CONSTRAINT release_date_check CHECK (release_date >= '1895-12-28'),
    CONSTRAINT duration_check CHECK (duration >= 1)
);

CREATE TABLE IF NOT EXISTS genres
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL,
    CONSTRAINT genres_name_check CHECK (LENGTH(name) BETWEEN 1 AND 50)
);

CREATE TABLE IF NOT EXISTS likes
(
    film_id INTEGER NOT NULL REFERENCES films (id) ON DELETE CASCADE,
    user_id INTEGER NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS friendships
(
    user_1            INTEGER NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    user_2            INTEGER NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    friendship_status BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (user_1, user_2)
);

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id  INTEGER NOT NULL REFERENCES films (id) ON DELETE CASCADE,
    genre_id INTEGER NOT NULL REFERENCES genres (id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);