package ru.yandex.practicum.filmorate.dao.impl;

import lombok.RequiredArgsConstructor;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import ru.yandex.practicum.filmorate.dao.UserDao;
import ru.yandex.practicum.filmorate.model.User;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Repository(value = "userDB")
@RequiredArgsConstructor
public class UserDaoDBImpl implements UserDao {

    public static final String SAVE_USER = "INSERT INTO users (email, login, name, birthday) " +
            "VALUES (?, ?, ?, ?)";
    public static final String FIND_USERS = "SELECT u.*, f.user_is AS user_id " +
            "FROM users AS u " +
            "LEFT OUTER JOIN friendships AS f ON u.id = f.user_1";
    public static final String UPDATE_USER = "UPDATE users SET name = ?, email = ?, login = ?, name = ?, birthday = ?" +
            "WHERE id = ?";
    public static final String DELETE_USER_BY_ID = "DELETE FROM users WHERE id = ?";
    public static final String IS_EXIST_USER_BY_ID = "SELECT EXISTS (SELECT 1 FROM users WHERE id=?)";

    private final JdbcTemplate jdbcTemplate;

//    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
//    email    VARCHAR(50) NOT NULL,
//    login    VARCHAR(50) NOT NULL,
//    name     VARCHAR(50) NOT NULL,
//    birthday DATE        NOT NULL


    @Override
    public User save(User user) {

        String sql = "INSERT INTO users (email, login, name, birthday) VALUES (?, ?, ?, ?)";
        KeyHolder keyHolder = new GeneratedKeyHolder();

        jdbcTemplate.update(connection -> {
            PreparedStatement stmt = connection.prepareStatement(sql, new String[]{"id"});
            stmt.setString(1, user.getEmail());
            stmt.setString(2, user.getLogin());
            stmt.setString(3, user.getName());
            stmt.setDate(4, Date.valueOf(user.getBirthday()));
            return stmt;
        }, keyHolder);

        Long userId = Objects.requireNonNull(keyHolder.getKey()).longValue();

        user.setId(userId);

        return user;
    }

    @Override
    public Optional<User> findById(Long userId) {
        return Optional.empty();
    }

    @Override
    public List<User> findAll() {
        return null;
    }

    @Override
    public Optional<User> update(User user) {
        return Optional.empty();
    }

    @Override
    public boolean deleteById(Long userId) {
        return false;
    }

    @Override
    public boolean isExistsById(Long userId) {

        String sql = "SELECT EXISTS (SELECT 1 FROM users WHERE id=?)";

        return Boolean.TRUE.equals(jdbcTemplate.queryForObject(sql, Boolean.class, userId));
    }

    @Override
    public boolean addFriend(Long userId, Long friendId) {
        return false;
    }

    @Override
    public List<User> findAllFriends(Long userId) {
        return null;
    }

    @Override
    public List<User> findCommonFriends(Long userId, Long otherId) {
        return null;
    }

    @Override
    public boolean deleteFriend(Long userId, Long friendId) {
        return false;
    }
}
